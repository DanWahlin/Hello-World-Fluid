Step by Step

Step 1: Import SharedMap and define container schema

import { SharedMap } from "@fluidframework/map";

const containerSchema = {
    name: 'cra-demo-container',
    initialObjects: { mySharedMap: SharedMap }
};

Step 2: Build “serviceConfig”

/**
 * This function imitates a file system. It allows us to create durable IDs for containers so we can access them later.
 * The ID is the number after the hash in the URL.
 * In a production system, we may store the list of container ID's in another database.
 */
const getContainerId = () => {
    let isNew = false;
    if (window.location.hash.length === 0) {
        isNew = true;
        window.location.hash = Date.now().toString();
    }
    const containerId = window.location.hash.substring(1);
    return { containerId, isNew };
};

const { containerId, isNew } = getContainerId();
const serviceConfig = { id: containerId };

Step 3: Initialize Tinylicious

import TinyliciousClient from "@fluid-experimental/tinylicious-client";

TinyliciousClient.init();


Step 4: Create or Get Container and return initialObjects (schema with SharedMap)

const getFluidData = async () => {

    const [fluidContainer, ] = isNew
        ? await TinyliciousClient.createContainer(serviceConfig, containerSchema)
        : await TinyliciousClient.getContainer(serviceConfig, containerSchema);

    return fluidContainer.initialObjects;
}

Step 5: Add hooks

    const [fluidData, setFluidData] = React.useState();
    const [viewData, setViewData] = React.useState();

    React.useEffect(() => {
        getFluidData().then(data => setFluidData(data))
    }, []);

Step 6: Connect View Data to SharedMap using useEffect() 
    
	React.useEffect(() => {
        if (!fluidData) return;

        const { mySharedMap } = fluidData;

        const syncView = () => setViewData({ time: mySharedMap.get("time") });
        
        // ensure sync runs at least once
        syncView();

        // update state each time our map changes
        mySharedMap.on("valueChanged", syncView);
        return () => { mySharedMap.off("valueChanged", syncView) }

    }, [fluidData])

Step 7: Add setTime function for click event

    const setTime = () => fluidData.mySharedMap.set("time", Date.now().toString());






